info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'
grails:
  cache:
    enabled: true
    cleanAtStartup: false
    cacheManager: grails.plugin.cache.GrailsConcurrentMapCacheManager
  codegen:
    defaultPackage: koolpump
  profile: web
  mime:
    disable:
      accept:
        header:
          userAgents:
          - Gecko
          - WebKit
          - Presto
          - Trident
    types:
      json:
      - application/json
      - text/json
      hal:
      - application/hal+json
      - application/hal+xml
      xml:
      - text/xml
      - application/xml
      atom: application/atom+xml
      css: text/css
      csv: text/csv
      js: text/javascript
      rss: application/rss+xml
      text: text/plain
      all: '*/*'
      form: application/x-www-form-urlencoded
      html:
      - text/html
      - application/xhtml+xml
      multipartForm: multipart/form-data
      pdf: application/pdf
  views:
    gsp:
      encoding: UTF-8
      htmlcodec: xml
      codecs:
        expression: html
        scriptlet: html
        taglib: none
        staticparts: none
    default:
      codec: html
dataSource:
  driverClassName: org.postgresql.Driver
  username: ${DB_USER:}
  password: ${DB_PASSWORD:}
  pooled: true
  jmxExport: true
environments:
  development:
    dataSource:
      dbCreate: create-drop
      url: jdbc:postgresql://localhost:5432/devDb
    grails:
      serverURL: http://localhost:8080
      mail:
          host: ${EMAIL_HOST:smtp.gmail.com}
          port: ${EMAIL_PORT:587}
          username: ${EMAIL_USERNAME:}
          password: ${EMAIL_PASSWORD:}
          props:
              mail.smtp.auth: true
              mail.smtp.starttls.enable: true
              mail.smtp.starttls.required: true
              mail.smtp.socketFactory.port: ${EMAIL_PORT:587}
              mail.smtp.socketFactory.fallback: false
          default:
              from: ${EMAIL_FROM:noreply@hpdb.com}
              replyTo: ${EMAIL_REPLY_TO:support@hpdb.com}
  test:
    dataSource:
      dbCreate: update
      url: jdbc:postgresql://localhost:5432/testDb
  production:
    dataSource:
      dbCreate: none
      url: jdbc:postgresql://localhost:5432/postgres
      properties:
        jmxEnabled: true
        initialSize: 5
        maxActive: 50
        minIdle: 5
        maxIdle: 25
        maxWait: 10000
        maxAge: 600000
        timeBetweenEvictionRunsMillis: 5000
        minEvictableIdleTimeMillis: 60000
        validationQuery: SELECT 1
        validationQueryTimeout: 3
        validationInterval: 15000
        testOnBorrow: true
        testWhileIdle: true
        testOnReturn: false
        jdbcInterceptors: ConnectionState
        defaultTransactionIsolation: 2
    grails:
      serverURL: http://www.koolpump.com
      mail:
          host: ${EMAIL_HOST:smtp.gmail.com}
          port: ${EMAIL_PORT:587}
          username: ${EMAIL_USERNAME:}
          password: ${EMAIL_PASSWORD:}
          props:
              mail.smtp.auth: true
              mail.smtp.starttls.enable: true
              mail.smtp.starttls.required: true
              mail.smtp.socketFactory.port: ${EMAIL_PORT:587}
              mail.smtp.socketFactory.fallback: false
          default:
              from: ${EMAIL_FROM:noreply@hpdb.com}
              replyTo: ${EMAIL_REPLY_TO:support@hpdb.com}
      plugin:
        console:
          enabled: false
          fileStore:
            remote:
              enabled: false
hibernate:
  cache:
    queries: false
    use_second_level_cache: false
    use_query_cache: false
quartz.autoStartup: true

---
# Application specific configuration
app:
  baseUrl: ${APP_BASE_URL:http://www.koolpump.com}
  
# Stripe Configuration
stripe:
  publicKey: ${STRIPE_PUBLIC_KEY:pk_test_placeholder}
  secretKey: ${STRIPE_SECRET_KEY:sk_test_placeholder}
  webhookSecret: ${STRIPE_WEBHOOK_SECRET:whsec_placeholder}

# OAuth Configuration
oauth:
  google:
    clientId: ${GOOGLE_CLIENT_ID:google_client_id_placeholder}
    clientSecret: ${GOOGLE_CLIENT_SECRET:google_client_secret_placeholder}
  microsoft:
    clientId: ${MICROSOFT_CLIENT_ID:microsoft_client_id_placeholder}
    clientSecret: ${MICROSOFT_CLIENT_SECRET:microsoft_client_secret_placeholder}

# reCAPTCHA Configuration
recaptcha:
  siteKey: ${RECAPTCHA_SITE_KEY:6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI}
  secretKey: ${RECAPTCHA_SECRET_KEY:6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe}

# Two-Factor Authentication
twoFactor:
  issuer: KoolPump
  qrCodeWidth: 200
  qrCodeHeight: 200

# Security Settings
security:
  password:
    minLength: 6
    expiryDays: 90
  session:
    timeout: 1800 # 30 minutes in seconds
  token:
    registrationExpiry: 24 # hours
    passwordResetExpiry: 12 # hours

# Subscription Settings
subscription:
  trial:
    days: 14
  plans:
    basic:
      price: 9.99
      currency: EUR
    professional:
      price: 29.99
      currency: EUR
    enterprise:
      price: 99.99
      currency: EUR

# Email Settings (already configured above)
# Additional email templates
email:
  templates:
    registration: /email/registration
    passwordReset: /email/passwordReset
    subscriptionConfirmation: /email/subscriptionConfirmation
    paymentSuccess: /email/paymentSuccess
    paymentFailed: /email/paymentFailed
